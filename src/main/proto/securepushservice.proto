syntax = "proto3";

package dev.baseio.slackdata.securepush;

import "hello.proto";

option java_multiple_files = true;

// The types of public keys.
enum KeyAlgorithm {
  RSA_ECDSA = 0;
  WEB_PUSH = 1;
}

// Container for a RSA hybrid encryption ciphertext.
message HybridRsaCiphertext {
  repeated dev.baseio.slackdata.protos.SKByteArrayElement symmetric_key_ciphertext = 1;
  repeated dev.baseio.slackdata.protos.SKByteArrayElement payload_ciphertext = 2;
}

// Container for a raw RSA public key and its associated metadata.
message WrappedRsaEcdsaPublicKey {
  string padding = 1;
  repeated dev.baseio.slackdata.protos.SKByteArrayElement key_bytes = 2;
}

// Container for a tink Web Push public key parameters.
message WrappedWebPushPublicKey {
  repeated dev.baseio.slackdata.protos.SKByteArrayElement auth_secret = 1;
  repeated dev.baseio.slackdata.protos.SKByteArrayElement key_bytes = 2;
}

// Container for a tink Web Push private key parameters.
message WrappedWebPushPrivateKey {
  repeated dev.baseio.slackdata.protos.SKByteArrayElement auth_secret = 1;
  repeated dev.baseio.slackdata.protos.SKByteArrayElement public_key_bytes = 2;
  repeated dev.baseio.slackdata.protos.SKByteArrayElement private_key_bytes = 3;
}

// Container for a Capillary public key and its associated metadata.
message SlackPublicKey {
  string keychain_unique_id = 1;
  int32 serial_number = 2;
  bool is_auth = 3;
  repeated dev.baseio.slackdata.protos.SKByteArrayElement key_bytes = 4;
}

// Container for a Slack ciphertext and its associated metadata.
message SlackCiphertext {
  string keychain_unique_id = 1;
  int32 key_serial_number = 2;
  bool is_auth_key = 3;
  repeated dev.baseio.slackdata.protos.SKByteArrayElement ciphertext = 4;
}


// A request to register the given public key for the specified user.
message AddOrUpdatePublicKeyRequest {
  string userId = 1;
  KeyAlgorithm algorithm = 2;
  bool isAuth = 3;
  repeated dev.baseio.slackdata.protos.SKByteArrayElement keyBytes = 4;
}

// A request to add the given user or update the FCM token of an existing user.
message AddOrUpdateUserRequest {
  string userId = 1;
  string token = 2;
}

// A request to send the embedded data bytes encrypted into a Capillary
// ciphertext to the specified user after the specified delay.
message SendMessageRequest {
  string userId = 1;
  KeyAlgorithm keyAlgorithm = 2;
  bool isAuthKey = 3;
  int32 delaySeconds = 4;
  repeated dev.baseio.slackdata.protos.SKByteArrayElement data = 5;
}

// The push notification that is shown to the user.
message SecureNotification {
  int32 id = 1;
  string title = 2;
  string body = 3;
}

service SecurePushService {
  // Registers a new user token or updates the FCM token of an existing user.
  rpc addOrUpdateUser (AddOrUpdateUserRequest) returns (dev.baseio.slackdata.protos.Empty);
  // Registers a new public key for the user or updates the existing
  // public key.
  rpc addOrUpdatePublicKey (AddOrUpdatePublicKeyRequest) returns (dev.baseio.slackdata.protos.Empty);
  // Encrypts the supplied data bytes into a ciphertext and sends it
  // to the user's device via FCM after the specified delay.
  rpc sendMessage (SendMessageRequest) returns (dev.baseio.slackdata.protos.Empty);
}