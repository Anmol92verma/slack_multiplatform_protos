syntax = "proto3";

package dev.baseio.slackdata.securepush;

import "hello.proto";

option java_multiple_files = true;

// The types of public keys.
enum KeyAlgorithm {
  RSA_ECDSA = 0;
  WEB_PUSH = 1;
}

// Container for a RSA hybrid encryption ciphertext.
message HybridRsaCiphertext {
  repeated dev.baseio.slackdata.protos.SKByteArrayElement symmetrickeyciphertext = 1;
  repeated dev.baseio.slackdata.protos.SKByteArrayElement payloadciphertext = 2;
}

// Container for a raw RSA public key and its associated metadata.
message WrappedRsaEcdsaPublicKey {
  string padding = 1;
  repeated dev.baseio.slackdata.protos.SKByteArrayElement keybytes = 2;
}

// Container for a Capillary public key and its associated metadata.
message SlackPublicKey {
  repeated dev.baseio.slackdata.protos.SKByteArrayElement keybytes = 4;
}

// Container for a Slack ciphertext and its associated metadata.
message SlackCiphertext {
  repeated dev.baseio.slackdata.protos.SKByteArrayElement ciphertext = 4;
}

// A request to register the given public key for the specified user.
message AddOrUpdatePublicKeyRequest {
  string deviceid = 1;
  KeyAlgorithm algorithm = 2;
  repeated dev.baseio.slackdata.protos.SKByteArrayElement keyBytes = 3;
}

// A request to add the given user or update the FCM token of an existing user.
message AddOrUpdateUserRequest {
  string deviceid = 1;
  string token = 2;
}

// The push notification that is shown to the user.
message SecureNotification {
  int32 id = 1;
  string title = 2;
  string body = 3;
}

service SecurePushService {
  rpc addOrUpdateUser (AddOrUpdateUserRequest) returns (dev.baseio.slackdata.protos.Empty);
  rpc addOrUpdatePublicKey (AddOrUpdatePublicKeyRequest) returns (dev.baseio.slackdata.protos.Empty);
}